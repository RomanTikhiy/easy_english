// <auto-generated />
using System;
using EasyEnglish.Server.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EasyEnglish.Server.Persistence.Migrations
{
    [DbContext(typeof(EasyEnglishDbContext))]
    [Migration("20190519132520_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EasyEnglish.Domain.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRight");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TestResultId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestResultId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EasyEnglish.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RightAnswer");

                    b.Property<int>("TestId");

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EasyEnglish.Domain.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tittle");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("EasyEnglish.Domain.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("PassingDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("EasyEnglish.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EasyEnglish.Domain.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("NativeLanguage");

                    b.Property<string>("Photo");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("EasyEnglish.Domain.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("EasyEnglish.Domain.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("SourceLanguage");

                    b.Property<string>("TargetLanguage");

                    b.Property<string>("Text");

                    b.Property<string>("VocabularyId");

                    b.Property<int?>("VocabularyId1");

                    b.HasKey("Id");

                    b.HasIndex("VocabularyId1");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("EasyEnglish.Domain.Answer", b =>
                {
                    b.HasOne("EasyEnglish.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EasyEnglish.Domain.TestResult", "TestResult")
                        .WithMany("Answers")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEnglish.Domain.Question", b =>
                {
                    b.HasOne("EasyEnglish.Domain.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEnglish.Domain.TestResult", b =>
                {
                    b.HasOne("EasyEnglish.Domain.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEnglish.Domain.UserInfo", b =>
                {
                    b.HasOne("EasyEnglish.Domain.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("EasyEnglish.Domain.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEnglish.Domain.Vocabulary", b =>
                {
                    b.HasOne("EasyEnglish.Domain.User", "User")
                        .WithMany("Vocabularies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EasyEnglish.Domain.Word", b =>
                {
                    b.HasOne("EasyEnglish.Domain.Vocabulary", "Vocabulary")
                        .WithMany("Words")
                        .HasForeignKey("VocabularyId1");
                });
#pragma warning restore 612, 618
        }
    }
}
